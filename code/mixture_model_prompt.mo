model mixerModule
  replaceable package Medium = Modelica.Media.Water.StandardWater;
  parameter Real tankMinVol = 0.1;
  parameter Real tankMaxVol = 0.15;
  parameter Real pump_P101_V_flow_at_max_head = 0.000122;
  parameter Real pump_P101_V_flow_at_middle_head = 0.0002;
  parameter Real pump_P101_V_flow_at_min_head = 0.00025;
  parameter Real pump_P101_head_max = 2.045;
  parameter Real pump_P101_head_middle = 1.534;
  parameter Real pump_P101_head_min = 1.022;
  // configurable parameters
  parameter Real B201_level = 0.0330000001033;
  parameter Real B202_level = 0.0282823757582958;
  parameter Real B203_level = 0.0219999998977993;
  parameter Real B204_level = 0.0591397291784853;
  parameter Boolean valve_in0_input = true;
  parameter Boolean valve_in1_input = true;
  parameter Boolean valve_in2_input = true;
  parameter Boolean valve_out_input = true;
  parameter Boolean valve_pump_tank_B201_input = true;
  parameter Boolean valve_pump_tank_B202_input = true;
  parameter Boolean valve_pump_tank_B203_input = true;
  // anomalies
  parameter Boolean anom_leaking = false;
  parameter Boolean anom_clogging = false;
  parameter Boolean anom_valve_in0 = false;
  parameter Boolean anom_valve_in1 = false;
  parameter Boolean anom_valve_in2 = false;
  parameter Boolean anom_valve_out = false;
  parameter Boolean anom_pump70 = false;
  parameter Boolean anom_pump90 = false;
  parameter Real var_valve_in0 = if anom_valve_in0 then 0.2 else 0.0;
  parameter Real var_valve_in1 = if anom_valve_in1 then 0.2 else 0.0;
  parameter Real var_valve_in2 = if anom_valve_in2 then 0.2 else 0.0;
  parameter Real var_valve_out = if anom_valve_out then 0.2 else 0.0;
  parameter Real var_pump_n = if anom_pump70 then 0.7 else if anom_pump90 then 0.9 else 1.0;
  Real pump_n_in;
  // ports
  Modelica.Fluid.Interfaces.FluidPort_a port_in0(redeclare package Medium = Medium);
mixture_model_prompt  Modelica.Fluid.Interfaces.FluidPort_a port_in1(redeclare package Medium = Medium);
  Modelica.Fluid.Interfaces.FluidPort_a port_in2(redeclare package Medium = Medium);
  Modelica.Fluid.Interfaces.FluidPort_b port_out0(redeclare package Medium = Medium);
  Modelica.Fluid.Sources.FixedBoundary anom_sink(redeclare package Medium = Medium, nPorts = 1, p = 0.999e5);
  // tanks
  Modelica.Fluid.Examples.AST_BatchPlant.BaseClasses.TankWithTopPorts tank_B201(redeclare package Medium = Medium, V0 = 0.0001, crossArea = 0.01431355, height = 0.22, level_start = B201_level, nPorts = 1, nTopPorts = 1, portsData = {Modelica.Fluid.Vessels.BaseClasses.VesselPortsData(diameter = 0.011, height = 0.001, zeta_out = 0, zeta_in = 1)}, stiffCharacteristicForEmptyPort = false, energyDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial, massDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial, p_ambient(displayUnit = "Pa") = 1e5);
  Modelica.Fluid.Examples.AST_BatchPlant.BaseClasses.TankWithTopPorts tank_B202(redeclare package Medium = Medium, V0 = 0.0001, crossArea = 0.01431355, energyDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial, height = 0.22, level_start = B202_level, massDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial, nPorts = 1, nTopPorts = 1, p_ambient(displayUnit = "Pa") = 1e5, portsData = {Modelica.Fluid.Vessels.BaseClasses.VesselPortsData(diameter = 0.011, height = 0.001, zeta_out = 0, zeta_in = 1)}, stiffCharacteristicForEmptyPort = false);
  Modelica.Fluid.Examples.AST_BatchPlant.BaseClasses.TankWithTopPorts tank_B203(redeclare package Medium = Medium, V0 = 0.0001, crossArea = 0.01431355, energyDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial, height = 0.22, level_start = B203_level, massDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial, nPorts = 1, nTopPorts = 1, p_ambient(displayUnit = "Pa") = 1e5, portsData = {Modelica.Fluid.Vessels.BaseClasses.VesselPortsData(diameter = 0.011, height = 0.001, zeta_out = 0, zeta_in = 1)}, stiffCharacteristicForEmptyPort = false);
  Modelica.Fluid.Examples.AST_BatchPlant.BaseClasses.TankWithTopPorts tank_B204(redeclare package Medium = Medium, V0 = 0.0001, crossArea = 0.01431355, height = 1.22, level_start = B204_level, nPorts = 1, nTopPorts = 1, portsData = {Modelica.Fluid.Vessels.BaseClasses.VesselPortsData(diameter = 0.011, height = 0.001, zeta_out = 0, zeta_in = 1)}, stiffCharacteristicForEmptyPort = false, energyDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial, massDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial, p_ambient(displayUnit = "Pa") = 1e5);
  // pipes
  Modelica.Fluid.Pipes.StaticPipe pipe0(redeclare package Medium = Medium, length = 1, diameter(displayUnit = "mm") = 0.01);
  Modelica.Fluid.Pipes.StaticPipe pipe1(redeclare package Medium = Medium, diameter(displayUnit = "mm") = 0.01, length = 1, m_flow_start = 0.0005);
  Modelica.Fluid.Pipes.StaticPipe pipe2(redeclare package Medium = Medium, diameter(displayUnit = "mm") = 0.01, length = 1);
  Modelica.Fluid.Pipes.StaticPipe pipe4(redeclare package Medium = Medium, diameter(displayUnit = "mm") = 0.01, length = 1);
  Modelica.Fluid.Pipes.StaticPipe pipe5(redeclare package Medium = Medium, diameter(displayUnit = "mm") = 0.01, length = 1, m_flow_start = 0.0005);
  Modelica.Fluid.Pipes.StaticPipe pipe6(redeclare package Medium = Medium, diameter(displayUnit = "mm") = 0.01, length = 1, m_flow_start = 0.0005);
  Modelica.Fluid.Fittings.TeeJunctionVolume tee0(redeclare package Medium = Medium, V = 0.1);
  Modelica.Fluid.Fittings.TeeJunctionVolume tee1(redeclare package Medium = Medium, V = 0.1);
  // valves
  Modelica.Fluid.Valves.ValveLinear valve_in0(redeclare package Medium = Medium, dp(start = 1), m_flow(start = 1e-5), dp_nominal = 1, m_flow_nominal = 1e-3);
  Modelica.Fluid.Valves.ValveLinear valve_in1(redeclare package Medium = Medium, dp(start = 1), dp_nominal = 1, m_flow(start = 1e-5), m_flow_nominal = 1e-3);
  Modelica.Fluid.Valves.ValveLinear valve_in2(redeclare package Medium = Medium, dp(start = 1), dp_nominal = 1, m_flow(start = 1e-5), m_flow_nominal = 1e-3);
  Modelica.Fluid.Valves.ValveLinear valve_out(redeclare package Medium = Medium, dp(start = 1e5), dp_nominal = 1, m_flow(start = 0.0001), m_flow_nominal = 1);
  Modelica.Fluid.Valves.ValveLinear valve_pump_tank_B201(redeclare package Medium = Medium, dp(start = 1), dp_nominal = 1, m_flow(start = 1e-5), m_flow_nominal = 1e-3);
  Modelica.Fluid.Valves.ValveLinear valve_pump_tank_B202(redeclare package Medium = Medium, dp(start = 1), dp_nominal = 1, m_flow(start = 1e-5), m_flow_nominal = 1e-3);
  Modelica.Fluid.Valves.ValveLinear valve_pump_tank_B203(redeclare package Medium = Medium, dp(start = 1), dp_nominal = 1, m_flow(start = 1e-5), m_flow_nominal = 1e-3);
  Modelica.Fluid.Valves.ValveLinear valve_pump_tank_B204(redeclare package Medium = Medium, dp(start = 1), dp_nominal = 1, m_flow(start = 1e-5), m_flow_nominal = 1e-3);
  Modelica.Fluid.Valves.ValveLinear leaking_valve(redeclare package Medium = Medium, dp(start = 1), dp_nominal = 1, m_flow(start = 1e-5), m_flow_nominal = 1e-3);
  Modelica.Fluid.Valves.ValveLinear clogging_valve(redeclare package Medium = Medium, dp(start = 1), dp_nominal = 1, m_flow(start = 1e-5), m_flow_nominal = 1e-3);
  // machines
  Modelica.Fluid.Machines.PrescribedPump pump_P101(redeclare package Medium = Medium, N_nominal = 166.43, m_flow_start = 0.000001, T_start = 300, V(displayUnit = "m3") = 0.00004398128, checkValve = true, checkValveHomotopy = Modelica.Fluid.Types.CheckValveHomotopyType.Closed, energyDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial, redeclare function flowCharacteristic = Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.quadraticFlow(V_flow_nominal = {pump_P101_V_flow_at_max_head, pump_P101_V_flow_at_middle_head, pump_P101_V_flow_at_min_head}, head_nominal = {pump_P101_head_max, pump_P101_head_middle, pump_P101_head_min}), massDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial, nParallel = 1, p_a_start = 100000, p_b_start = 100000, use_N_in = true, allowFlowReversal = false);
  Modelica.Blocks.Continuous.FirstOrder firstOrder(T = 1);
  Modelica.Blocks.Sources.RealExpression n_in(y = pump_n_in);
  Modelica.Blocks.Noise.UniformNoise uniformNoise(samplePeriod = 1, y_max = 0.8, y_min = 1.2);
  Modelica.Blocks.Math.Product product1;
  // sensors
  Modelica.Blocks.Math.RealToBoolean level_to_boolean_tank_B201_low(threshold = 0.1*tank_B201.height);
  Modelica.Blocks.Math.RealToBoolean level_to_boolean_tank_B201_medium(threshold = 0.5*tank_B201.height);
  Modelica.Blocks.Math.RealToBoolean level_to_boolean_tank_B201_high(threshold = 0.9*tank_B201.height);
  Modelica.Blocks.Sources.RealExpression tank_B201_level(y = tank_B201.level);
  Modelica.Blocks.Interaction.Show.BooleanValue sensor_discrete_tank_B201_low;
  Modelica.Blocks.Interaction.Show.BooleanValue sensor_discrete_tank_B201_medium;
  Modelica.Blocks.Interaction.Show.BooleanValue sensor_discrete_tank_B201_high;
  Modelica.Blocks.Math.RealToBoolean level_to_boolean_tank_B202_low(threshold = 0.1*tank_B202.height);
  Modelica.Blocks.Math.RealToBoolean level_to_boolean_tank_B202_medium(threshold = 0.5*tank_B202.height);
  Modelica.Blocks.Math.RealToBoolean level_to_boolean_tank_B202_high(threshold = 0.9*tank_B202.height);
  Modelica.Blocks.Sources.RealExpression tank_B202_level(y = tank_B202.level);
  Modelica.Blocks.Interaction.Show.BooleanValue sensor_discrete_tank_B202_low;
  Modelica.Blocks.Interaction.Show.BooleanValue sensor_discrete_tank_B202_medium;
  Modelica.Blocks.Interaction.Show.BooleanValue sensor_discrete_tank_B202_high;
  Modelica.Blocks.Math.RealToBoolean level_to_boolean_tank_B203_low(threshold = 0.1*tank_B203.height);
  Modelica.Blocks.Math.RealToBoolean level_to_boolean_tank_B203_medium(threshold = 0.5*tank_B203.height);
  Modelica.Blocks.Math.RealToBoolean level_to_boolean_tank_B203_high(threshold = 0.9*tank_B203.height);
  Modelica.Blocks.Sources.RealExpression tank_B203_level(y = tank_B203.level);
  Modelica.Blocks.Interaction.Show.BooleanValue sensor_discrete_tank_B203_low;
  Modelica.Blocks.Interaction.Show.BooleanValue sensor_discrete_tank_B203_medium;
  Modelica.Blocks.Interaction.Show.BooleanValue sensor_discrete_tank_B203_high;
  Modelica.Blocks.Math.RealToBoolean level_to_boolean_tank_B204_low(threshold = 0.1*tank_B204.height);
  Modelica.Blocks.Math.RealToBoolean level_to_boolean_tank_B204_medium(threshold = 0.5*tank_B204.height);
  Modelica.Blocks.Math.RealToBoolean level_to_boolean_tank_B204_high(threshold = 0.9*tank_B204.height);
  Modelica.Blocks.Sources.RealExpression tank_B204_level(y = tank_B204.level);
  Modelica.Blocks.Interaction.Show.BooleanValue sensor_discrete_tank_B204_low;
  Modelica.Blocks.Interaction.Show.BooleanValue sensor_discrete_tank_B204_medium;
  Modelica.Blocks.Interaction.Show.BooleanValue sensor_discrete_tank_B204_high;
  Modelica.Fluid.Sensors.Pressure sensor_continuous_pressure_tank_B201(replaceable package Medium = Medium);
  Modelica.Fluid.Sensors.Pressure sensor_continuous_pressure_tank_B202(replaceable package Medium = Medium);
  Modelica.Fluid.Sensors.Pressure sensor_continuous_pressure_tank_B203(replaceable package Medium = Medium);
  Modelica.Fluid.Sensors.Pressure sensor_continuous_pressure_tank_B204(replaceable package Medium = Medium);
  Modelica.Fluid.Sensors.Pressure pressure_pump_P101(replaceable package Medium = Medium);
  Modelica.Fluid.Sensors.VolumeFlowRate sensor_continuous_volumeFlowRate(replaceable package Medium = Medium);
  // stategraph
  inner Modelica.StateGraph.StateGraphRoot stateGraphRoot;
  Modelica.StateGraph.Step state_filling_tank_B201(nIn = 2, nOut = 1);
  Modelica.StateGraph.Step state_emptying_tank_B201(nIn = 1, nOut = 1);
  Modelica.StateGraph.InitialStep state_initialStep(nOut = 1, nIn = 1);
  Modelica.StateGraph.Transition condition_init_step(enableTimer = true, waitTime = 0);
  Modelica.StateGraph.TransitionWithSignal condition_is_full_tank_B201(enableTimer = true, waitTime = 0);
  Modelica.StateGraph.TransitionWithSignal condition_is_empty_tank_B201(enableTimer = true, waitTime = 0);
  Modelica.StateGraph.Step state_filling_tank_B202(nIn = 1, nOut = 1);
  Modelica.StateGraph.TransitionWithSignal condition_is_full_tank_B202(enableTimer = true, waitTime = 0);
  Modelica.StateGraph.Step state_emptying_tank_B202(nIn = 1, nOut = 1);
  Modelica.StateGraph.TransitionWithSignal condition_is_empty_tank_B202(enableTimer = true, waitTime = 0);
  Modelica.StateGraph.TransitionWithSignal condition_is_full_tank_B203(enableTimer = true, waitTime = 0);
  Modelica.StateGraph.Step state_filling_tank_B203(nIn = 1, nOut = 1);
  Modelica.StateGraph.TransitionWithSignal condition_is_empty_tank_B203(enableTimer = true, waitTime = 0);
  Modelica.StateGraph.Step state_emptying_tank_B203(nIn = 1, nOut = 1);
  Modelica.StateGraph.Step state_emptying_tank_B204(nIn = 1, nOut = 1);
  Modelica.StateGraph.TransitionWithSignal condition_is_empty_tank_B204(enableTimer = true, waitTime = 0);
  Modelica.Fluid.Pipes.StaticPipe pipe7(redeclare package Medium = Medium, diameter(displayUnit = "mm") = 0.01, length = 1, m_flow_start = 0.0005);
equation
  condition_is_full_tank_B201.condition = tank_B201.level >= tank_B201.height*tankMaxVol;
  condition_is_full_tank_B202.condition = tank_B202.level >= tank_B202.height*tankMaxVol;
  condition_is_full_tank_B203.condition = tank_B203.level >= tank_B203.height*tankMaxVol;
  condition_is_empty_tank_B201.condition = tank_B201.level <= tank_B201.height*tankMinVol;
  condition_is_empty_tank_B202.condition = tank_B202.level <= tank_B202.height*tankMinVol;
  condition_is_empty_tank_B203.condition = tank_B203.level <= tank_B203.height*tankMinVol;
  condition_is_empty_tank_B204.condition = tank_B204.level <= tank_B204.height*tankMinVol;
  valve_in0.opening = if state_filling_tank_B201.active and valve_in0_input then 1.0 else var_valve_in0;
  valve_in1.opening = if state_filling_tank_B202.active and valve_in1_input then 1.0 else var_valve_in1;
  valve_in2.opening = if state_filling_tank_B203.active and valve_in2_input then 1.0 else var_valve_in2;
  valve_pump_tank_B201.opening = if state_emptying_tank_B201.active and valve_pump_tank_B201_input then 1.0 else 0.0;
  valve_pump_tank_B202.opening = if state_emptying_tank_B202.active and valve_pump_tank_B202_input then 1.0 else 0.0;
  valve_pump_tank_B203.opening = if state_emptying_tank_B203.active and valve_pump_tank_B203_input then 1.0 else 0.0;
  valve_pump_tank_B204.opening = if state_emptying_tank_B201.active then 1.0 elseif state_emptying_tank_B202.active then 1.0
   elseif state_emptying_tank_B203.active then 1.0 else 0.0;
  pump_n_in = if state_emptying_tank_B201.active then 150.0*var_pump_n elseif state_emptying_tank_B202.active then 150.0*var_pump_n
   elseif state_emptying_tank_B203.active then 150.0*var_pump_n else 0.0;
  valve_out.opening = if state_emptying_tank_B204.active then 1.0 else 0.0;
// anomalies
  leaking_valve.opening = if anom_leaking then 0.8 else 0.0;
  clogging_valve.opening = if anom_clogging then 0.2 else 1.0;
// connections
  connect(tank_B201.ports[1], pipe0.port_a);
  connect(valve_in0.port_a, port_in0);
  connect(valve_in0.port_b, tank_B201.topPorts[1]);
  connect(valve_out.port_b, port_out0);
  connect(state_initialStep.outPort[1], condition_init_step.inPort);
  connect(condition_init_step.outPort, state_filling_tank_B201.inPort[1]);
  connect(state_filling_tank_B201.outPort[1], condition_is_full_tank_B201.inPort);
  connect(state_emptying_tank_B201.outPort[1], condition_is_empty_tank_B201.inPort);
  connect(tank_B204.ports[1], valve_out.port_a);
  connect(pipe0.port_b, valve_pump_tank_B201.port_a);
  connect(state_emptying_tank_B204.outPort[1], condition_is_empty_tank_B204.inPort);
  connect(valve_in1.port_a, port_in1);
  connect(valve_in1.port_b, tank_B202.topPorts[1]);
  connect(tank_B202.ports[1], pipe2.port_a);
  connect(pipe2.port_b, valve_pump_tank_B202.port_a);
  connect(condition_is_full_tank_B201.outPort, state_filling_tank_B202.inPort[1]);
  connect(state_filling_tank_B202.outPort[1], condition_is_full_tank_B202.inPort);
  connect(condition_is_empty_tank_B201.outPort, state_emptying_tank_B202.inPort[1]);
  connect(state_emptying_tank_B202.outPort[1], condition_is_empty_tank_B202.inPort);
  connect(firstOrder.y, pump_P101.N_in);
  connect(valve_pump_tank_B201.port_b, tee0.port_1);
  connect(condition_is_full_tank_B202.outPort, state_filling_tank_B203.inPort[1]);
  connect(state_filling_tank_B203.outPort[1], condition_is_full_tank_B203.inPort);
  connect(condition_is_empty_tank_B202.outPort, state_emptying_tank_B203.inPort[1]);
  connect(state_emptying_tank_B203.outPort[1], condition_is_empty_tank_B203.inPort);
  connect(condition_is_full_tank_B203.outPort, state_emptying_tank_B201.inPort[1]);
  connect(condition_is_empty_tank_B203.outPort, state_emptying_tank_B204.inPort[1]);
  connect(valve_in2.port_a, port_in2);
  connect(valve_in2.port_b, tank_B203.topPorts[1]);
  connect(tank_B203.ports[1], pipe4.port_a);
  connect(pipe4.port_b, valve_pump_tank_B203.port_a);
  connect(valve_pump_tank_B203.port_b, tee1.port_2);
  connect(valve_pump_tank_B202.port_b, tee1.port_3);
  connect(tee1.port_1, tee0.port_2);
  connect(condition_is_empty_tank_B204.outPort, state_initialStep.inPort[1]);
  connect(pump_P101.port_b, pipe5.port_a);
  connect(pipe5.port_b, valve_pump_tank_B204.port_a);
  connect(valve_pump_tank_B204.port_b, pipe1.port_a);
  connect(pipe6.port_b, pump_P101.port_a);
  connect(tank_B201_level.y, level_to_boolean_tank_B201_high.u);
  connect(tank_B201_level.y, level_to_boolean_tank_B201_medium.u);
  connect(tank_B201_level.y, level_to_boolean_tank_B201_low.u);
  connect(level_to_boolean_tank_B201_high.y, sensor_discrete_tank_B201_high.activePort);
  connect(level_to_boolean_tank_B201_medium.y, sensor_discrete_tank_B201_medium.activePort);
  connect(level_to_boolean_tank_B201_low.y, sensor_discrete_tank_B201_low.activePort);
  connect(tank_B202_level.y, level_to_boolean_tank_B202_high.u);
  connect(tank_B202_level.y, level_to_boolean_tank_B202_medium.u);
  connect(tank_B202_level.y, level_to_boolean_tank_B202_low.u);
  connect(level_to_boolean_tank_B202_high.y, sensor_discrete_tank_B202_high.activePort);
  connect(level_to_boolean_tank_B202_medium.y, sensor_discrete_tank_B202_medium.activePort);
  connect(level_to_boolean_tank_B202_low.y, sensor_discrete_tank_B202_low.activePort);
  connect(tank_B203_level.y, level_to_boolean_tank_B203_high.u);
  connect(tank_B203_level.y, level_to_boolean_tank_B203_medium.u);
  connect(tank_B203_level.y, level_to_boolean_tank_B203_low.u);
  connect(level_to_boolean_tank_B203_high.y, sensor_discrete_tank_B203_high.activePort);
  connect(level_to_boolean_tank_B203_medium.y, sensor_discrete_tank_B203_medium.activePort);
  connect(level_to_boolean_tank_B203_low.y, sensor_discrete_tank_B203_low.activePort);
  connect(tank_B204_level.y, level_to_boolean_tank_B204_high.u);
  connect(tank_B204_level.y, level_to_boolean_tank_B204_medium.u);
  connect(tank_B204_level.y, level_to_boolean_tank_B204_low.u);
  connect(level_to_boolean_tank_B204_high.y, sensor_discrete_tank_B204_high.activePort);
  connect(level_to_boolean_tank_B204_medium.y, sensor_discrete_tank_B204_medium.activePort);
  connect(level_to_boolean_tank_B204_low.y, sensor_discrete_tank_B204_low.activePort);
  connect(pipe1.port_b, sensor_continuous_volumeFlowRate.port_a);
  connect(sensor_continuous_volumeFlowRate.port_b, tank_B204.topPorts[1]);
  connect(sensor_continuous_pressure_tank_B201.port, valve_pump_tank_B201.port_a);
  connect(sensor_continuous_pressure_tank_B202.port, valve_pump_tank_B202.port_a);
  connect(sensor_continuous_pressure_tank_B203.port, valve_pump_tank_B203.port_a);
  connect(sensor_continuous_pressure_tank_B204.port, valve_out.port_a);
  connect(pressure_pump_P101.port, pump_P101.port_b);
  connect(uniformNoise.y, product1.u2);
  connect(n_in.y, product1.u1);
  connect(product1.y, firstOrder.u);
  connect(clogging_valve.port_b, pipe6.port_a);
  connect(leaking_valve.port_b, anom_sink.ports[1]);
  connect(tee0.port_3, pipe7.port_a);
  connect(pipe7.port_b, clogging_valve.port_a);
  connect(pipe7.port_b, leaking_valve.port_a);
end mixerModule;